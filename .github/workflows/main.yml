name: Main

env:
  PROJECT_DIR: WorkingTitle
  PROJECT_NAME: WorkingTitle
  USE_ODIN: true
  ODIN_REPO: EuleMitKeule/odin-inspector-3.1.6.1
  GH_PAT: ${{ secrets.GH_PAT }}

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:

jobs:

  version:
    name: Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.release-version }}
      newVersion: ${{ steps.release.outputs.new-release-published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Calculate version
        uses: docker://ghcr.io/codfish/semantic-release-action:latest
        id: version
        with:
          tag_format: 'v${version}'
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    needs: version
    runs-on: ubuntu-latest
    outputs:
      artifactsPath: ${{ steps.run-tests.outputs.artifactsPath }}
      coveragePath: ${{ steps.run-tests.outputs.coveragePath }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Checkout odin-inspector
        uses: actions/checkout@v3
        with:
           repository: ${{ env.ODIN_REPO }}
           path: odin/
           ref: master
           token: ${{ env.GH_PAT }}
      
      - name: Move odin-inspector
        run: |
          cp -r odin/* ${{ env.PROJECT_DIR }}
          rm -r odin
      
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PROJECT_DIR }}/Library
          key: Library-${{ env.PROJECT_DIR }}-TargetPlatform
          restore-keys: |
            Library-${{ env.PROJECT_DIR }}-
            Library-

      - name: Run tests
        id: run-tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          projectPath: WorkingTitle/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          customParameters: -debugCodeOptimization -enableCodeCoverage -coverageOptions generateBadgeReport;assemblyFilters:+WorkingTitle.Unity,+WorkingTitle.Lib

      - name: Store results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test Results
          path: ${{ steps.run-tests.outputs.artifactsPath }}

      - name: Store coverage
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Code Coverage
          path: ${{ steps.run-tests.outputs.coveragePath }}

  sonar:
    name: SonarCloud
    needs: [version, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download test results
        uses: actions/download-artifact@v2
        with:
          name: Test Results
          path: ${{ needs.test.outputs.artifactsPath }}

      - name: Download code coverage
        uses: actions/download-artifact@v2
        with:
          name: Code Coverage
          path: ${{ needs.test.outputs.coveragePath }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.cs.nunit.reportsPaths=${{ needs.test.outputs.artifactsPath }}/editmode-results.xml,${{ needs.test.outputs.artifactsPath }}/playmode-results.xml
            -Dsonar.cs.opencover.reportsPaths=${{ needs.test.outputs.coveragePath }}/${{ env.PROJECT_NAME }}-opencov/EditMode/TestCoverageResults_0000.xml,${{ needs.test.outputs.coveragePath }}/${{ env.PROJECT_NAME }}-opencov/PlayMode/TestCoverageResults_0000.xml
            -Dsonar.verbose=true
            -Dsonar.projectVersion=${{ needs.version.outputs.version }}

  build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        buildTarget: ["StandaloneWindows64", "StandaloneOSX", "StandaloneLinux64", "WebGL"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Checkout odin-inspector
        uses: actions/checkout@v3
        with:
           repository: ${{ env.ODIN_REPO }}
           path: odin/
           ref: master
           token: ${{ env.GH_PAT }}
      
      - name: Move odin-inspector
        run: |
          cp -r odin/* ${{ env.PROJECT_DIR }}
          rm -r odin
      
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PROJECT_DIR }}/Library
          key: Library-${{ env.PROJECT_DIR }}-TargetPlatform
          restore-keys: |
            Library-${{ env.PROJECT_DIR }}-
            Library-

      - name: Build ${{ matrix.buildTarget }}
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.buildTarget }}
          projectPath: ${{ env.PROJECT_DIR }}
          buildName: ${{ env.PROJECT_NAME }}-${{ needs.version.outputs.version }}
          buildsPath: ${{ env.PROJECT_NAME }}-${{ matrix.buildTarget }}-${{ needs.version.outputs.version }}
          versioning: Custom
          version: ${{ needs.version.outputs.version }}

      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: ${{ env.PROJECT_NAME }}-${{ matrix.buildTarget }}-${{ needs.version.outputs.version }}
      
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [version, build]
    if: ${{ needs.version.outputs.newVersion == 'true' }}
    outputs:
      releaseCreated: ${{ steps.release.outputs.new-release-published }}
      uploadUrl: ${{ steps.getUploadUrl.outputs.uploadUrl }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create release
        if: ${{ github.event_name == 'push' }}
        uses: docker://ghcr.io/codfish/semantic-release-action:latest
        id: release
        with:
          tag_format: 'v${version}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get upload URL
        if: |
          ${{ steps.release.outputs.new-release-published == 'true' }} &&
          ${{ github.event_name == 'push' }}
        id: getUploadUrl
        run: |
          echo "getting upload url for release ${{ steps.release.outputs.version }} with tag v${{ steps.release.outputs.release-version }}"
          uploadUrl=$(curl -sL https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.release.outputs.release-version }} | jq -r '.upload_url')
          echo uploadUrl=$uploadUrl >> $GITHUB_OUTPUT

  upload:
    name: Upload
    runs-on: ubuntu-latest
    needs: [build, release]
    if: ${{ needs.release.outputs.releaseCreated == 'true' }}
    strategy:
      matrix:
        buildTarget: ["StandaloneWindows64", "StandaloneOSX", "StandaloneLinux64", "WebGL"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: Build
          path: ${{ env.PROJECT_NAME }}-${{ matrix.buildTarget }}-${{ needs.version.outputs.version }}

      - name: Upload build
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ needs.release.outputs.uploadUrl }}
          asset_path: ${{ env.PROJECT_NAME }}-${{ matrix.buildTarget }}-${{ needs.version.outputs.version }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.buildTarget }}-${{ needs.version.outputs.version }}.zip
          asset_content_type: application/zip
